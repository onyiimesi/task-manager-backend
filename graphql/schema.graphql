"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    tasks: [Task] @all
    task(id: ID @eq): Task @find
    tasksByStatus(status: String): [Task!]!

    categories: [Category] @all
    category(id: ID @eq): Category @find
}

type Mutation {

    createUser(
        name: String! @rules(apply: ["required"]),
        email: String! @rules(apply: ["email", "unique:users"]),
        password: String! @rules(apply: ["min:5"]) @hash
    ): User! @create

    loginUser(
        email: String!
        password: String!

    ): AuthPayload

    logoutUser: Boolean

    createCategory(
        name: String  @rules(apply: ["required"])
    ): Category @create

    updateCategory(
        id: ID @rules(apply: ["required"])
        name: String @rules(apply: ["required"])
    ): Category @update

    deleteCategory(
        id: ID! @rules(apply: ["required"])
    ): Category @delete


    createTask(
        title: String!  @rules(apply: ["required"])
        description: String
        due_date: String
        status: String
        category_id: String!
    ): Task @create

    updateTask(
        id: ID @rules(apply: ["required"])
        title: String!  @rules(apply: ["required"])
        description: String
        due_date: String
        status: String
        category_id: String!
    ): Task @update

    deleteTask(
        id: ID! @rules(apply: ["required"])
    ): Task

}



"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "User's password"
    password: String!

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type AuthPayload {
  user: User
  token: String
}

type Task {
    id: ID!
    title: String!
    description: String
    due_date: String
    status: String
    category: Category! @belongsTo
}

type Category {
    id: ID!
    name: String!
    tasks: [Task] @hasMany
}
